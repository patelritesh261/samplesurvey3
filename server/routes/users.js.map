{"version":3,"sources":["routes/users.ts"],"names":[],"mappings":"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","file":"routes/users.js","sourcesContent":["import express = require('express');\nimport passport = require('passport');\nvar router = express.Router();\n\n// db references\nimport mongoose = require('mongoose');\nimport userModel = require('../models/user');\n\nimport User = userModel.User;\n\n/* Utility Function to check if user is authenticated */\nfunction requireAuth(req:express.Request, res:express.Response, next: any) {\n    // check if the user is logged in\n    if (!req.isAuthenticated()) {\n        return res.redirect('/login');\n    }\n    next();\n}\n\n// GET - show main users page - list all the users\nrouter.get('/', requireAuth, (req: express.Request, res: express.Response, next: any) => {\n   \n    // use the Users model to query the Users collection\n    User.find((error, users) => {\n        if (error) {\n            console.log(error);\n            res.end(error);\n        }\n        else {\n            // no error, we found a list of users\n            res.render('users/index', {\n                title: 'Users',\n                users: users,\n                displayName: req.user ? req.user.displayName : ''\n            });\n        }\n    });\n});\n\n/* Render Registration page */\nrouter.get('/add', (req:express.Request, res: express.Response, next:any) => {\n   \n        res.render('users/add', {\n            title: 'Register',\n            messages: req.flash('registerMessage'),\n            displayName: req.user ? req.user.displayName : ''\n        });\n       \n});\n\n/* Process Registration Request */\nrouter.post('/add', (req:express.Request, res: express.Response, next:any) => {\n    // attempt to register user\n    User.register(new User(\n       { username: req.body.username,\n         password: req.body.password,\n         email: req.body.email,\n         displayName: req.body.displayName\n       }), req.body.password, (err) => {\n           if(err) {\n               console.log('Error Inserting New Data');\n               if(err.name == 'UserExistsError') {\n               req.flash('registerMessage', 'Registration Error: User Already Exists!');\n               }\n               return res.render('users/add', {\n                    title: 'Register',\n                    messages: req.flash('registerMessage'),\n                    displayName: req.user ? req.user.displayName : ''\n                });\n           }\n           // if registration is successful\n           return passport.authenticate('local')(req, res, ()=>{\n              res.redirect('/users'); \n           });\n       });\n});\n\n\n// GET add page - show the blank form\n/*router.get('/add', requireAuth, (req: express.Request, res: express.Response, next: any) => {\n    res.render('users/add', {\n        title: 'Add a New User',\n        displayName: req.user ? req.user.displayName : ''\n    });\n});\n\n// POST add page - save the new user\nrouter.post('/add', requireAuth, (req: express.Request, res: express.Response, next: any) => {\n    User.create({\n        username: req.body.username,\n        password: req.body.password,\n        email: req.body.email,\n        displayName: req.body.displayName\n    }, (error, User) => {\n        // did we get back an error or valid Users object?\n        if (error) {\n            console.log(error);\n            res.end(error);\n        }\n        else {\n            res.redirect('/users');\n        }\n    })\n});*/\n\n// GET edit page - show the current user in the form\nrouter.get('/:id', requireAuth, (req: express.Request, res: express.Response, next: any) => {\n\n    var id = req.params.id;\n\n    User.findById(id, (error, User) => {\n        if (error) {\n            console.log(error);\n            res.end(error);\n        }\n        else {\n            //show the edit view\n            res.render('users/edit', {\n                title: 'User Details',\n                user: User,\n                displayName: req.user ? req.user.displayName : ''\n            });\n        }\n    });\n});\n\n// POST edit page - update the selected user\nrouter.post('/:id', requireAuth, (req: express.Request, res: express.Response, next: any) => {\n\n    // grab the id from the url parameter\n    var id = req.params.id;\n\n    // create and populate a user object\n    var user = new User({\n        _id: id,\n        username: req.body.username,\n        password: req.body.password,\n        email: req.body.email,\n        displayName: req.body.displayName\n    });\n    \n    \n\n    // run the update using mongoose and our model\n    User.update({ _id: id }, user, (error) => {\n        if (error) {\n            console.log(error);\n            res.end(error);\n        }\n        else {\n            // if update is successful redirect to the users page\n            res.redirect('/users');\n        }\n    });\n});\n\n// GET delete user\nrouter.get('/delete/:id', requireAuth, (req: express.Request, res: express.Response, next: any) => {\n\n    // get the id from the url\n    var id = req.params.id;\n\n    // use the model and delete this record\n    User.remove({ _id: id }, (error) => {\n        if (error) {\n            console.log(error);\n            res.end(error);\n        }\n        else {\n            // if removal worked redirect to users page\n            res.redirect('/users');\n        }\n    });\n});\n\n\n// make this public\nmodule.exports = router;"],"sourceRoot":"/source/"}